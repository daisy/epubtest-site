{%- extends 'base/base.njk' -%}
{%- import "components/topic-names.njk" as topicNames -%}
{%- import "components/testing-environment-labels.njk" as testingEnvironmentLabels -%}
{%- import "components/breadcrumbs.njk" as breadcrumbs -%}
{%- set title="Results for test " + testId -%}

{%- block content -%}
<main>
    {{breadcrumbs.Breadcrumbs(crumbs)}}

    {%- if testingEnvironments | length == 0 -%}
    <p>No results are available for this test.</p>
    {%- else -%}
    <h2>{{ test.name }} ({{ test.testId }})</h2>
    <p>Below are all the published results for the test <a href="/test-books/{{topicId}}/{{test.testBook.version}}/{{ test.testId }}">{{ test.testId }}</a>, 
        which appears in <a href="/test-books/{{topicId}}/{{test.testBook.version}}">{{ topicNames.TopicName(topicId) }} ({{test.testBook.version}})</a>.</p>

    <p>This test currently has a {{ (numPassing/testingEnvironments.length * 100).toFixed(2) }}% pass rate.</p>

    {%- if test.flag -%}
    <p class="latest-testbook">This test is new or changed from the previous revision.</p>
    {%- endif -%}
    <div id="table-controls" class="table-controls"></div>
    <div role="region" aria-labelledby="table-caption" tabindex="0">
        <table class="results-for-test" id="results-for-test">
            <caption class="visually-hidden" id="table-caption">Reading system testing results</caption>
            <thead>
                <tr>
                    <th>Testing Environment</th>
                    <th>
                        {{ test.name }} ( {{ test.testId }})
                    </th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                {%- for testingEnvironment in testingEnvironments -%}
                <tr>
                    <td>
                        {{ testingEnvironmentLabels.TestingEnvironmentLink(testingEnvironment) }}
                    </td>
                    {# there should just be one answer in the answer set anyway #}
                    {%- for answer in testingEnvironment.answerSets[0].answers -%}
                    <td>
                        {{ answer.value }}
                    </td>
                    <td>
                        {%- if answer.notesArePublic -%}
                        {{ answer.notes }}
                        {%- endif -%}
                    </td>
                    {%- endfor -%}
                </tr>
                {%- endfor -%}
            </tbody>
        </table>
    </div>
    {%- endif -%}
</main>

{%- if testingEnvironments | length > 0 -%}
<script type="module" src="/js/table.js"></script>
<script type="module">
    import { EnhancedTable } from '/js/table.js';
    
    let tableElm = document.querySelector("table");
    let tableControlsElm = document.querySelector("#table-controls");
    let enhancedTable = new EnhancedTable(tableElm, tableControlsElm);
    enhancedTable.enableSearch();
    let sortingRules = [{
            columnIndex: 0, 
            type: "alpha",
            firstSort: "ascending",
            pathFn: r => r.querySelector(`td:nth-child(1)`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim()
        }];

    // each test col
    let tableHeaderCols = Array.from(tableElm.querySelectorAll('table thead th:not(:first-child)'));
    sortingRules = [...sortingRules, ...(tableHeaderCols.map((th, idx) => {
        let colIdx = idx + 1;
            return {
                columnIndex: colIdx,
                type: "alpha",
                firstSort: "descending",
                pathFn: r => r.querySelector(`td:nth-child(${colIdx+1})`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim()
            } 
    }))];

    enhancedTable.enableSort(sortingRules);
    enhancedTable.enableFilters([
        {
            label: "Reading System",
            pathFn: r => {
                let elm = r.querySelector(`td:nth-child(1) span.readingSystem span.name`);
                if (elm) {
                    return elm.textContent.trim();
                }
                else {
                    return "";
                }
            }
        },
        {
            label: "Assistive Technology",
            pathFn: r => {
                let elm = r.querySelector(`td:nth-child(1) span.assistiveTechnology span.name`);
                if (elm) {
                    return elm.textContent.trim();
                }
                else {
                    return "";
                }
            }
        },
        {
            label: "OS",
            pathFn: r => {
                let elm = r.querySelector(`td:nth-child(1) span.os span.name`);
                if (elm) {
                    return elm.textContent.trim();
                }
                else {
                    return "";
                }
            }
        }
    ]);
    // load any sort/filter/search values from local storage
    enhancedTable.loadFromStore();
</script>
{%- endif -%}
{%- endblock -%}