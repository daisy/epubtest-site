{%- extends 'base/base.njk' -%}
{%- import "components/format-score.njk" as formatScore -%}
{%- import "components/topic-names.njk" as topicNames -%}
{%- import "components/testing-environment-labels.njk" as testingEnvironmentLabels -%}
{%- if isArchivesPage -%}
{%- set title="Archived Results" -%}
{%- else -%}
{%- set title="Results" -%}
{%- endif -%}

{%- block content -%}
<main>
    
    {%- if isArchivesPage -%}
    <h2>Archives</h2>
    <p>The following Testing Environments have been archived.</p>
    {%- else -%}
    <h2>Results</h2>
    <div>
        <p>See all results on this page or explore further by topic:</p>
        <ul class="cols topics">
            {%- for topic in topics -%}
                <li><a href="/results/topic/{{topic.id}}">{{topicNames.TopicName(topic.id)}}</a></li>
            {%- endfor -%}
        </ul>
    </div>
    
    <p>Below are accessibility testing results for Testing Environments (Reading System or Reading System + Assistive Technology 
        combination), organized by topic. Learn more about the <a href="/test-books">tests</a>.</p>
    
    
    
    {%- endif -%}



    <div id="table-controls" class="table-controls"></div>
    <div role="region" aria-labelledby="table-caption" tabindex="0">
        <table id="results-table">
            <caption class="visually-hidden" id="table-caption">Reading system testing results {%- if isArchivesPage %} (archives){%- endif -%}</caption>
            <thead>
                <th>Testing Environment</th>
                {%- for topic in topics -%}
                    <th>{{topicNames.TopicName(topic.id)}}</th>
                {%- endfor -%}
            </thead>
            <tbody>
                {%- for testingEnvironment in testingEnvironments -%}
                <tr>
                    <td>
                        {{ testingEnvironmentLabels.TestingEnvironmentLink(testingEnvironment) }}
                        {%- if accessLevel == 'admin' -%}
                        <a href="/admin/testing-environment/{{testingEnvironment.id}}">Manage</a>
                        {%- endif -%}
                        
                    </td>
                    {%- for topic in topics -%}
                    {%- set answerSet = displayUtils.getAnswerSetForTopic(testingEnvironment, topic.id) -%}
                    {%- if answerSet.testBook.isLatest == false and answerSet.isTested -%}
                    <td class="not-latest-testbook">
                    {%- else -%}
                    <td>
                    {%- endif -%}
                        {%- if answerSet and answerSet.isTested -%}
                        <a href="/results/{{testingEnvironment.id}}/#{{answerSet.testBook.topic.id}}">
                        {{ formatScore.FormatScore(answerSet) }}
                        </a>
                        {%- else -%}
                        {{ formatScore.FormatScore(answerSet) }}
                        {%- endif -%}
                    </td>
                    {%- endfor -%}
                </tr>
                {%- endfor -%}
            </tbody>
        </table>
    </div>
    {%- if isArchivesPage == false -%}
    <p><a href="/archive">Archived Results</a></p>
    {%- endif -%}
</main>
<script type="module" src="/js/table.js"></script>
<script type="module">
    import { EnhancedTable } from '/js/table.js';
    
    let tableElm = document.querySelector("table");
    let tableControlsElm = document.querySelector("#table-controls");
    let enhancedTable = new EnhancedTable(tableElm, tableControlsElm);
    enhancedTable.enableSearch();
    enhancedTable.enableSort([
        {
            columnIndex: 0, 
            type: "alpha",
            firstSort: "ascending",
            pathFn: r => r.querySelector(`td:nth-child(1)`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim()
        },
        {
            columnIndex: 1,
            type: "numeric",
            firstSort: "descending",
            pathFn: r => {
                if (r.querySelector(`td:nth-child(2) > span.not-tested`) != null) {
                    return -1;
                }
                let text = r.querySelector(`td:nth-child(2)`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim();
                text = text.replace("%", "");
                return parseFloat(text);
            }
        },
        {
            columnIndex: 2,
            type: "numeric",
            firstSort: "descending",
            pathFn: r => {
                if (r.querySelector(`td:nth-child(3) > span.not-tested`) != null) {
                    return -1;
                }
                let text = r.querySelector(`td:nth-child(3)`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim();
                text = text.replace("%", "");
                return parseFloat(text);
            }
        },
        {
            columnIndex: 3,
            type: "numeric",
            firstSort: "descending",
            pathFn: r => {
                if (r.querySelector(`td:nth-child(4) > span.not-tested`) != null) {
                    return -1;
                }
                let text = r.querySelector(`td:nth-child(4)`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim();
                text = text.replace("%", "");
                return parseFloat(text);
            }
        },
        {
            columnIndex: 4,
            type: "numeric",
            firstSort: "descending",
            pathFn: r => {
                if (r.querySelector(`td:nth-child(5) > span.not-tested`) != null) {
                    return -1;
                }
                let text = r.querySelector(`td:nth-child(5)`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim();
                text = text.replace("%", "");
                return parseFloat(text);
            }
        },
        {
            columnIndex: 5,
            type: "numeric",
            firstSort: "descending",
            pathFn: r => {
                if (r.querySelector(`td:nth-child(6) > span.not-tested`) != null) {
                    return -1;
                }
                let text = r.querySelector(`td:nth-child(6)`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim();
                text = text.replace("%", "");
                return parseFloat(text);
            }
        },
        {
            columnIndex: 6,
            type: "numeric",
            firstSort: "descending",
            pathFn: r => {
                if (r.querySelector(`td:nth-child(7) > span.not-tested`) != null) {
                    return -1;
                }
                let text = r.querySelector(`td:nth-child(7)`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim();
                text = text.replace("%", "");
                return parseFloat(text);
            }
        },
        {
            columnIndex: 7,
            type: "numeric",
            firstSort: "descending",
            pathFn: r => {
                if (r.querySelector(`td:nth-child(8) > span.not-tested`) != null) {
                    return -1;
                }
                let text = r.querySelector(`td:nth-child(8)`).textContent.replace(/[\n\r]+|[\s]{1,}/g, ' ').trim();
                text = text.replace("%", "");
                return parseFloat(text);
            }
        }
    ]);
    enhancedTable.enableFilters([
        {
            label: "Reading System",
            pathFn: r => {
                let elm = r.querySelector(`td:nth-child(1) span.readingSystem span.name`);
                if (elm) {
                    return elm.textContent.trim();
                }
                else {
                    return "";
                }
            }
        },
        {
            label: "Assistive Technology",
            pathFn: r => {
                let elm = r.querySelector(`td:nth-child(1) span.assistiveTechnology span.name`);
                if (elm) {
                    return elm.textContent.trim();
                }
                else {
                    return "";
                }
            }
        },
        {
            label: "OS",
            pathFn: r => {
                let elm = r.querySelector(`td:nth-child(1) span.os span.name`);
                if (elm) {
                    return elm.textContent.trim();
                }
                else {
                    return "";
                }
            }
        }
    ]);
    // load any sort/filter/search values from local storage
    enhancedTable.loadFromStore();
</script>
{%- endblock -%}